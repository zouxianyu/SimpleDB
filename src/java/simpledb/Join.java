package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate joinPredicate;
    private OpIterator[] children = new OpIterator[2];

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.joinPredicate = p;
        this.children[0] = child1;
        this.children[1] = child2;
    }

    public JoinPredicate getJoinPredicate() {
        return joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return children[0].getTupleDesc().getFieldName(joinPredicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return children[1].getTupleDesc().getFieldName(joinPredicate.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(children[0].getTupleDesc(), children[1].getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        children[0].open();
        children[1].open();
        temp[0] = children[0].next();
        end = false;
    }

    public void close() {
        end = true;
        children[1].close();
        children[0].close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        close();
        open();
    }

    private Tuple[] temp = new Tuple[2];
    private boolean end;

    private Tuple merge(TupleDesc tb, Tuple tuple1, Tuple tuple2) {
        Tuple tuple = new Tuple(tb);

        // i represents the index of the field in the result
        // j represents the index of the field in each tuple
        int i = 0;
        for (int j = 0; j < tuple1.getTupleDesc().numFields(); i++, j++) {
            tuple.setField(i, tuple1.getField(j));
        }
        for (int j = 0; j < tuple2.getTupleDesc().numFields(); i++, j++) {
            tuple.setField(i, tuple2.getField(j));
        }
        return tuple;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {

        // if the iteration is over, return null
        if(end) {
            return null;
        }

        // if there is no more tuple in the right relation, we should
        // fetch the next tuple in the left relation and rewind
        // the right relation
        if(!children[1].hasNext()){
            children[1].rewind();
            if(!children[0].hasNext()){
                end = true;
                return null;
            }else{
                temp[0] = children[0].next();
            }
        }
        temp[1] = children[1].next();

        // if any of the tuple is null, we should return null
        // and stop the iteration
        if(temp[0] == null || temp[1] == null){
            end = true;
            return null;
        }

        return merge(getTupleDesc(), temp[0], temp[1]);
    }

    @Override
    public OpIterator[] getChildren() {
        return children;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        assert children.length == 2;
        this.children = children;
    }

}
